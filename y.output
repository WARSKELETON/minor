   0  $accept : file $end

   1  file : program
   2       | module

   3  program : PROGRAM decls START body END

   4  module : MODULE decls END

   5  decls :
   6        | decls ';' decl

   7  decl : func
   8       | qualifier CONST var ATTR literal
   9       | qualifier CONST var
  10       | qualifier var ATTR literal
  11       | qualifier var

  12  func : FUNCTION qualifier functype ID vars funcend

  13  funcend : DONE
  14          | DO body

  15  functype : type
  16           | VOID

  17  qualifier :
  18            | PUBLIC
  19            | FORWARD

  20  vars :
  21       | vars ';' var

  22  var : type ID

  23  type : NUMBER
  24       | ARRAY
  25       | STRING

  26  body : instrs

  27  instr : IF expr THEN instrs FI
  28        | IF expr THEN instrs ELIF expr THEN instrs ELSE instrs FI
  29        | IF expr THEN instrs ELIF expr THEN instrs FI
  30        | IF expr THEN instrs ELSE instrs FI
  31        | FOR expr UNTIL expr STEP expr DO instrs DONE
  32        | expr ';'
  33        | expr '!'
  34        | REPEAT
  35        | STOP
  36        | RETURN

  37  instrs :
  38         | instrs instr

  39  expr : ID
  40       | literal
  41       | '-' expr
  42       | '&' expr
  43       | expr '+' expr
  44       | expr '-' expr
  45       | expr '*' expr
  46       | expr '/' expr
  47       | expr '%' expr
  48       | expr '<' expr
  49       | expr '>' expr
  50       | expr GE expr
  51       | expr LE expr
  52       | expr NE expr
  53       | expr '=' expr

  54  literal : INTEGER
  55          | STR

state 0
	$accept : . file $end  (0)

	PROGRAM  shift 1
	MODULE  shift 2
	.  error

	file  goto 3
	program  goto 4
	module  goto 5


state 1
	program : PROGRAM . decls START body END  (3)
	decls : .  (5)

	.  reduce 5

	decls  goto 6


state 2
	module : MODULE . decls END  (4)
	decls : .  (5)

	.  reduce 5

	decls  goto 7


state 3
	$accept : file . $end  (0)

	$end  accept


state 4
	file : program .  (1)

	.  reduce 1


state 5
	file : module .  (2)

	.  reduce 2


state 6
	program : PROGRAM decls . START body END  (3)
	decls : decls . ';' decl  (6)

	START  shift 8
	';'  shift 9
	.  error


state 7
	module : MODULE decls . END  (4)
	decls : decls . ';' decl  (6)

	END  shift 10
	';'  shift 9
	.  error


state 8
	program : PROGRAM decls START . body END  (3)
	instrs : .  (37)

	.  reduce 37

	body  goto 11
	instrs  goto 12


state 9
	decls : decls ';' . decl  (6)
	qualifier : .  (17)

	FUNCTION  shift 13
	PUBLIC  shift 14
	FORWARD  shift 15
	NUMBER  reduce 17
	ARRAY  reduce 17
	STRING  reduce 17
	CONST  reduce 17

	decl  goto 16
	func  goto 17
	qualifier  goto 18


state 10
	module : MODULE decls END .  (4)

	.  reduce 4


state 11
	program : PROGRAM decls START body . END  (3)

	END  shift 19
	.  error


state 12
	body : instrs .  (26)
	instrs : instrs . instr  (38)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	IF  shift 23
	FOR  shift 24
	REPEAT  shift 25
	STOP  shift 26
	RETURN  shift 27
	'-'  shift 28
	'&'  shift 29
	START  reduce 26
	END  reduce 26
	';'  reduce 26

	literal  goto 30
	instr  goto 31
	expr  goto 32


state 13
	func : FUNCTION . qualifier functype ID vars funcend  (12)
	qualifier : .  (17)

	PUBLIC  shift 14
	FORWARD  shift 15
	NUMBER  reduce 17
	ARRAY  reduce 17
	VOID  reduce 17
	STRING  reduce 17

	qualifier  goto 33


state 14
	qualifier : PUBLIC .  (18)

	.  reduce 18


state 15
	qualifier : FORWARD .  (19)

	.  reduce 19


state 16
	decls : decls ';' decl .  (6)

	.  reduce 6


state 17
	decl : func .  (7)

	.  reduce 7


state 18
	decl : qualifier . CONST var ATTR literal  (8)
	decl : qualifier . CONST var  (9)
	decl : qualifier . var ATTR literal  (10)
	decl : qualifier . var  (11)

	NUMBER  shift 34
	ARRAY  shift 35
	STRING  shift 36
	CONST  shift 37
	.  error

	var  goto 38
	type  goto 39


state 19
	program : PROGRAM decls START body END .  (3)

	.  reduce 3


state 20
	literal : INTEGER .  (54)

	.  reduce 54


state 21
	expr : ID .  (39)

	.  reduce 39


state 22
	literal : STR .  (55)

	.  reduce 55


state 23
	instr : IF . expr THEN instrs FI  (27)
	instr : IF . expr THEN instrs ELIF expr THEN instrs ELSE instrs FI  (28)
	instr : IF . expr THEN instrs ELIF expr THEN instrs FI  (29)
	instr : IF . expr THEN instrs ELSE instrs FI  (30)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 40


state 24
	instr : FOR . expr UNTIL expr STEP expr DO instrs DONE  (31)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 41


state 25
	instr : REPEAT .  (34)

	.  reduce 34


state 26
	instr : STOP .  (35)

	.  reduce 35


state 27
	instr : RETURN .  (36)

	.  reduce 36


state 28
	expr : '-' . expr  (41)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 42


state 29
	expr : '&' . expr  (42)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 43


state 30
	expr : literal .  (40)

	.  reduce 40


state 31
	instrs : instrs instr .  (38)

	.  reduce 38


state 32
	instr : expr . ';'  (32)
	instr : expr . '!'  (33)
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	'*'  shift 44
	'/'  shift 45
	'%'  shift 46
	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	';'  shift 55
	'!'  shift 56
	.  error


state 33
	func : FUNCTION qualifier . functype ID vars funcend  (12)

	NUMBER  shift 34
	ARRAY  shift 35
	VOID  shift 57
	STRING  shift 36
	.  error

	functype  goto 58
	type  goto 59


state 34
	type : NUMBER .  (23)

	.  reduce 23


state 35
	type : ARRAY .  (24)

	.  reduce 24


state 36
	type : STRING .  (25)

	.  reduce 25


state 37
	decl : qualifier CONST . var ATTR literal  (8)
	decl : qualifier CONST . var  (9)

	NUMBER  shift 34
	ARRAY  shift 35
	STRING  shift 36
	.  error

	var  goto 60
	type  goto 39


state 38
	decl : qualifier var . ATTR literal  (10)
	decl : qualifier var .  (11)

	ATTR  shift 61
	START  reduce 11
	END  reduce 11
	';'  reduce 11


state 39
	var : type . ID  (22)

	ID  shift 62
	.  error


state 40
	instr : IF expr . THEN instrs FI  (27)
	instr : IF expr . THEN instrs ELIF expr THEN instrs ELSE instrs FI  (28)
	instr : IF expr . THEN instrs ELIF expr THEN instrs FI  (29)
	instr : IF expr . THEN instrs ELSE instrs FI  (30)
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	THEN  shift 63
	'*'  shift 44
	'/'  shift 45
	'%'  shift 46
	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	.  error


state 41
	instr : FOR expr . UNTIL expr STEP expr DO instrs DONE  (31)
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	UNTIL  shift 64
	'*'  shift 44
	'/'  shift 45
	'%'  shift 46
	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	.  error


state 42
	expr : '-' expr .  (41)
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	'*'  shift 44
	'/'  shift 45
	'%'  shift 46
	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	DO  reduce 41
	THEN  reduce 41
	UNTIL  reduce 41
	STEP  reduce 41
	';'  reduce 41
	'!'  reduce 41


state 43
	expr : '&' expr .  (42)
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	'*'  shift 44
	'/'  shift 45
	'%'  shift 46
	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	DO  reduce 42
	THEN  reduce 42
	UNTIL  reduce 42
	STEP  reduce 42
	';'  reduce 42
	'!'  reduce 42


state 44
	expr : expr '*' . expr  (45)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 65


state 45
	expr : expr '/' . expr  (46)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 66


state 46
	expr : expr '%' . expr  (47)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 67


state 47
	expr : expr '+' . expr  (43)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 68


state 48
	expr : expr '-' . expr  (44)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 69


state 49
	expr : expr '<' . expr  (48)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 70


state 50
	expr : expr '>' . expr  (49)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 71


state 51
	expr : expr LE . expr  (51)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 72


state 52
	expr : expr GE . expr  (50)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 73


state 53
	expr : expr NE . expr  (52)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 74


state 54
	expr : expr '=' . expr  (53)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 75


state 55
	instr : expr ';' .  (32)

	.  reduce 32


state 56
	instr : expr '!' .  (33)

	.  reduce 33


state 57
	functype : VOID .  (16)

	.  reduce 16


state 58
	func : FUNCTION qualifier functype . ID vars funcend  (12)

	ID  shift 76
	.  error


state 59
	functype : type .  (15)

	.  reduce 15


state 60
	decl : qualifier CONST var . ATTR literal  (8)
	decl : qualifier CONST var .  (9)

	ATTR  shift 77
	START  reduce 9
	END  reduce 9
	';'  reduce 9


state 61
	decl : qualifier var ATTR . literal  (10)

	INTEGER  shift 20
	STR  shift 22
	.  error

	literal  goto 78


state 62
	var : type ID .  (22)

	.  reduce 22


state 63
	instr : IF expr THEN . instrs FI  (27)
	instr : IF expr THEN . instrs ELIF expr THEN instrs ELSE instrs FI  (28)
	instr : IF expr THEN . instrs ELIF expr THEN instrs FI  (29)
	instr : IF expr THEN . instrs ELSE instrs FI  (30)
	instrs : .  (37)

	.  reduce 37

	instrs  goto 79


state 64
	instr : FOR expr UNTIL . expr STEP expr DO instrs DONE  (31)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 80


state 65
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr '*' expr .  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	DO  reduce 45
	THEN  reduce 45
	UNTIL  reduce 45
	STEP  reduce 45
	'*'  reduce 45
	'/'  reduce 45
	'%'  reduce 45
	';'  reduce 45
	'!'  reduce 45


state 66
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr '/' expr .  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	DO  reduce 46
	THEN  reduce 46
	UNTIL  reduce 46
	STEP  reduce 46
	'*'  reduce 46
	'/'  reduce 46
	'%'  reduce 46
	';'  reduce 46
	'!'  reduce 46


state 67
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr '%' expr .  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	DO  reduce 47
	THEN  reduce 47
	UNTIL  reduce 47
	STEP  reduce 47
	'*'  reduce 47
	'/'  reduce 47
	'%'  reduce 47
	';'  reduce 47
	'!'  reduce 47


state 68
	expr : expr . '+' expr  (43)
	expr : expr '+' expr .  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	DO  reduce 43
	THEN  reduce 43
	UNTIL  reduce 43
	STEP  reduce 43
	'*'  reduce 43
	'/'  reduce 43
	'%'  reduce 43
	'+'  reduce 43
	'-'  reduce 43
	';'  reduce 43
	'!'  reduce 43


state 69
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr '-' expr .  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	DO  reduce 44
	THEN  reduce 44
	UNTIL  reduce 44
	STEP  reduce 44
	'*'  reduce 44
	'/'  reduce 44
	'%'  reduce 44
	'+'  reduce 44
	'-'  reduce 44
	';'  reduce 44
	'!'  reduce 44


state 70
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr '<' expr .  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	NE  shift 53
	'='  shift 54
	DO  reduce 48
	THEN  reduce 48
	UNTIL  reduce 48
	STEP  reduce 48
	'*'  reduce 48
	'/'  reduce 48
	'%'  reduce 48
	'+'  reduce 48
	'-'  reduce 48
	'<'  reduce 48
	'>'  reduce 48
	LE  reduce 48
	GE  reduce 48
	';'  reduce 48
	'!'  reduce 48


state 71
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr '>' expr .  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	NE  shift 53
	'='  shift 54
	DO  reduce 49
	THEN  reduce 49
	UNTIL  reduce 49
	STEP  reduce 49
	'*'  reduce 49
	'/'  reduce 49
	'%'  reduce 49
	'+'  reduce 49
	'-'  reduce 49
	'<'  reduce 49
	'>'  reduce 49
	LE  reduce 49
	GE  reduce 49
	';'  reduce 49
	'!'  reduce 49


state 72
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr LE expr .  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	NE  shift 53
	'='  shift 54
	DO  reduce 51
	THEN  reduce 51
	UNTIL  reduce 51
	STEP  reduce 51
	'*'  reduce 51
	'/'  reduce 51
	'%'  reduce 51
	'+'  reduce 51
	'-'  reduce 51
	'<'  reduce 51
	'>'  reduce 51
	LE  reduce 51
	GE  reduce 51
	';'  reduce 51
	'!'  reduce 51


state 73
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr GE expr .  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	NE  shift 53
	'='  shift 54
	DO  reduce 50
	THEN  reduce 50
	UNTIL  reduce 50
	STEP  reduce 50
	'*'  reduce 50
	'/'  reduce 50
	'%'  reduce 50
	'+'  reduce 50
	'-'  reduce 50
	'<'  reduce 50
	'>'  reduce 50
	LE  reduce 50
	GE  reduce 50
	';'  reduce 50
	'!'  reduce 50


state 74
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr NE expr .  (52)
	expr : expr . '=' expr  (53)

	.  reduce 52


state 75
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)
	expr : expr '=' expr .  (53)

	.  reduce 53


state 76
	func : FUNCTION qualifier functype ID . vars funcend  (12)
	vars : .  (20)

	.  reduce 20

	vars  goto 81


state 77
	decl : qualifier CONST var ATTR . literal  (8)

	INTEGER  shift 20
	STR  shift 22
	.  error

	literal  goto 82


state 78
	decl : qualifier var ATTR literal .  (10)

	.  reduce 10


state 79
	instr : IF expr THEN instrs . FI  (27)
	instr : IF expr THEN instrs . ELIF expr THEN instrs ELSE instrs FI  (28)
	instr : IF expr THEN instrs . ELIF expr THEN instrs FI  (29)
	instr : IF expr THEN instrs . ELSE instrs FI  (30)
	instrs : instrs . instr  (38)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	IF  shift 23
	ELSE  shift 83
	ELIF  shift 84
	FI  shift 85
	FOR  shift 24
	REPEAT  shift 25
	STOP  shift 26
	RETURN  shift 27
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	instr  goto 31
	expr  goto 32


state 80
	instr : FOR expr UNTIL expr . STEP expr DO instrs DONE  (31)
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	STEP  shift 86
	'*'  shift 44
	'/'  shift 45
	'%'  shift 46
	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	.  error


state 81
	func : FUNCTION qualifier functype ID vars . funcend  (12)
	vars : vars . ';' var  (21)

	DONE  shift 87
	DO  shift 88
	';'  shift 89
	.  error

	funcend  goto 90


state 82
	decl : qualifier CONST var ATTR literal .  (8)

	.  reduce 8


state 83
	instr : IF expr THEN instrs ELSE . instrs FI  (30)
	instrs : .  (37)

	.  reduce 37

	instrs  goto 91


state 84
	instr : IF expr THEN instrs ELIF . expr THEN instrs ELSE instrs FI  (28)
	instr : IF expr THEN instrs ELIF . expr THEN instrs FI  (29)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 92


state 85
	instr : IF expr THEN instrs FI .  (27)

	.  reduce 27


state 86
	instr : FOR expr UNTIL expr STEP . expr DO instrs DONE  (31)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	expr  goto 93


state 87
	funcend : DONE .  (13)

	.  reduce 13


state 88
	funcend : DO . body  (14)
	instrs : .  (37)

	.  reduce 37

	body  goto 94
	instrs  goto 12


state 89
	vars : vars ';' . var  (21)

	NUMBER  shift 34
	ARRAY  shift 35
	STRING  shift 36
	.  error

	var  goto 95
	type  goto 39


state 90
	func : FUNCTION qualifier functype ID vars funcend .  (12)

	.  reduce 12


state 91
	instr : IF expr THEN instrs ELSE instrs . FI  (30)
	instrs : instrs . instr  (38)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	IF  shift 23
	FI  shift 96
	FOR  shift 24
	REPEAT  shift 25
	STOP  shift 26
	RETURN  shift 27
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	instr  goto 31
	expr  goto 32


state 92
	instr : IF expr THEN instrs ELIF expr . THEN instrs ELSE instrs FI  (28)
	instr : IF expr THEN instrs ELIF expr . THEN instrs FI  (29)
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	THEN  shift 97
	'*'  shift 44
	'/'  shift 45
	'%'  shift 46
	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	.  error


state 93
	instr : FOR expr UNTIL expr STEP expr . DO instrs DONE  (31)
	expr : expr . '+' expr  (43)
	expr : expr . '-' expr  (44)
	expr : expr . '*' expr  (45)
	expr : expr . '/' expr  (46)
	expr : expr . '%' expr  (47)
	expr : expr . '<' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . GE expr  (50)
	expr : expr . LE expr  (51)
	expr : expr . NE expr  (52)
	expr : expr . '=' expr  (53)

	DO  shift 98
	'*'  shift 44
	'/'  shift 45
	'%'  shift 46
	'+'  shift 47
	'-'  shift 48
	'<'  shift 49
	'>'  shift 50
	LE  shift 51
	GE  shift 52
	NE  shift 53
	'='  shift 54
	.  error


state 94
	funcend : DO body .  (14)

	.  reduce 14


state 95
	vars : vars ';' var .  (21)

	.  reduce 21


state 96
	instr : IF expr THEN instrs ELSE instrs FI .  (30)

	.  reduce 30


state 97
	instr : IF expr THEN instrs ELIF expr THEN . instrs ELSE instrs FI  (28)
	instr : IF expr THEN instrs ELIF expr THEN . instrs FI  (29)
	instrs : .  (37)

	.  reduce 37

	instrs  goto 99


state 98
	instr : FOR expr UNTIL expr STEP expr DO . instrs DONE  (31)
	instrs : .  (37)

	.  reduce 37

	instrs  goto 100


state 99
	instr : IF expr THEN instrs ELIF expr THEN instrs . ELSE instrs FI  (28)
	instr : IF expr THEN instrs ELIF expr THEN instrs . FI  (29)
	instrs : instrs . instr  (38)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	IF  shift 23
	ELSE  shift 101
	FI  shift 102
	FOR  shift 24
	REPEAT  shift 25
	STOP  shift 26
	RETURN  shift 27
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	instr  goto 31
	expr  goto 32


state 100
	instr : FOR expr UNTIL expr STEP expr DO instrs . DONE  (31)
	instrs : instrs . instr  (38)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	DONE  shift 103
	IF  shift 23
	FOR  shift 24
	REPEAT  shift 25
	STOP  shift 26
	RETURN  shift 27
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	instr  goto 31
	expr  goto 32


state 101
	instr : IF expr THEN instrs ELIF expr THEN instrs ELSE . instrs FI  (28)
	instrs : .  (37)

	.  reduce 37

	instrs  goto 104


state 102
	instr : IF expr THEN instrs ELIF expr THEN instrs FI .  (29)

	.  reduce 29


state 103
	instr : FOR expr UNTIL expr STEP expr DO instrs DONE .  (31)

	.  reduce 31


state 104
	instr : IF expr THEN instrs ELIF expr THEN instrs ELSE instrs . FI  (28)
	instrs : instrs . instr  (38)

	INTEGER  shift 20
	ID  shift 21
	STR  shift 22
	IF  shift 23
	FI  shift 105
	FOR  shift 24
	REPEAT  shift 25
	STOP  shift 26
	RETURN  shift 27
	'-'  shift 28
	'&'  shift 29
	.  error

	literal  goto 30
	instr  goto 31
	expr  goto 32


state 105
	instr : IF expr THEN instrs ELIF expr THEN instrs ELSE instrs FI .  (28)

	.  reduce 28


53 terminals, 18 nonterminals
56 grammar rules, 106 states
